function [ details, paths ] = dprst_subjects( id, options )
%DPRST_SUBJECTS Function that sets all filenames and paths
%   IN:     EITHER (for quering both general and subject-specific paths:
%           id                  - the subject number as a string, e.g. '0001'
%           options (optional)  - the struct that holds all analysis options
%           OR (for only quering general paths & files):
%           options - the struct that holds all analysis options 
%   OUT:    details     - a struct that holds all filenames and paths for
%                       the subject with subject number id
%           paths       - a struct that holds all paths and config files
%                       that are not subject-specific

%-- check input ----------------------------------------------------------%
if isstruct(id)
    options = id;
    id = 'dummy';
elseif ischar(id) && nargin < 2
    options = mnket_set_analysis_options;
end

%-- subject-specific paths and files -------------------------------------%
% differences in file endings
switch id
    case {'9997', '6666'}
        rawsuffix = '';
    otherwise 
        rawsuffix = '_task';
end

% names
details.subrawname     = ['TNU_DPRST_' id];
details.subproname     = ['DPRST_' id];

details.rawfilename    = [details.subproname '_' options.task rawsuffix];
details.prepfilename   = [details.subproname '_' options.task '_preproc'];
%details.artefactname   = ['acebfdfMspmeeg_' details.subproname '_' ...
%                            options.task '_task'];
details.avgname        = ['m' details.subproname];
details.filname        = ['fm' details.subproname];

% directories
details.subrawroot    = fullfile(options.workdir, 'data', 'raw', ...
                            details.subrawname, 'eegdata');
details.subproroot    = fullfile(options.workdir, 'data', 'pro', ...
                            options.part, 'subjects', details.subproname);
                       
details.mriroot        = fullfile(details.subproroot, 'mri');
details.preproot       = fullfile(details.subproroot, 'spm_prep');

details.statroot        = fullfile(details.subproroot, 'spm_stats');
details.spacroot        = fullfile(details.statroot, ...
                            options.conversion.space);
details.resuroot        = fullfile(details.spacroot, ...
                            options.conversion.convPrefix);
details.priorroot       = fullfile(details.resuroot, ...
                            options.stats.priors);
details.designroot      = fullfile(details.priorroot, ...
                            options.stats.design);

paths.erproot        = fullfile(options.workdir, options.part, 'erp');
paths.erpfold        = fullfile(paths.erproot, options.erp.type);

switch options.stats.mode
    case 'modelbased'
        details.convroot = fullfile(details.preproot, ...
            [options.conversion.space '_' options.conversion.convPrefix '_' ...
            details.prepname]);
    case 'ERP'
        details.convroot = fullfile(paths.erpfold, ...
            [options.conversion.space '_' options.conversion.convPrefix '_' ...
            details.filname]);
end


% files
details.logfile         = fullfile(details.subproroot, ...
                            [details.subproname '.log']);
details.rawfile         = fullfile(details.subrawroot, ...
                            [details.rawfilename '.eeg']);
details.mrifile         = fullfile(details.mriroot, ...
                            [details.subproname '_struct.nii']);
details.fiducialrtf     = fullfile(details.mriroot, ...
                            [details.subproname '_smri_fiducials.rtf']);
details.fiducialtxt     = fullfile(details.mriroot, ...
                            [details.subproname '_smri_fiducials.txt']);
details.fiducialmat     = fullfile(details.mriroot, ...
                            [details.subproname '_smri_fiducials.mat']);
details.prepfile        = fullfile(details.preproot, ...
                            [details.prepfilename '.mat']);
details.trialstats      = fullfile(details.preproot, [details.subproname '_trialStats.mat']);
details.ntrialscorr     = fullfile(details.preproot, [details.subproname '_nTrialsCorr.mat']);
details.artefacts       = fullfile(details.preproot, ...
                            [details.subproname '_nArtefacts.mat']);
details.eyeblinks       = fullfile(details.preproot, ...
                            [details.subproname '_nEyeblinks.mat']);
details.idxeyeartefacts = fullfile(details.preproot, [details.subproname '_idxEyeartefacts.mat']);
details.numeyeartefacts = fullfile(details.preproot, [details.subproname '_nEyeartefacts.mat']);
details.ntrialsgood     = fullfile(details.preproot, [details.subproname '_nTrialsGood.mat']);

details.erpfile         = fullfile(paths.erpfold, ...
                            [details.subproname '.mat']);
details.avgfile         = fullfile(paths.erpfold, ...
                            [details.avgname '.mat']);
details.filfile         = fullfile(paths.erpfold, ...
                            [details.filname '.mat']);
details.trialNumbers    = fullfile(paths.erpfold, ...
                            'trialNumbers.mat');
details.artfStats       = fullfile(options.workdir, options.part, ...
                            'data', 'artefactStats.mat');                        


switch options.stats.mode
    case 'modelbased'
        details.convfile = fullfile(details.convroot, ...
            'condition_tone.nii,');
        details.smoofile = fullfile(details.convroot, ...
            'smoothed_condition_tone.nii,');
    case 'ERP'
        switch options.erp.type
            case 'roving'
                details.convfile{1} = fullfile(details.convroot, ...
                    'condition_none.nii,1');
                details.convfile{2} = fullfile(details.convroot, ...
                    'condition_standard.nii,1');
                details.convfile{3} = fullfile(details.convroot, ...
                    'condition_deviant.nii,1');
                
                details.smoofile{1} = fullfile(details.convroot, ...
                    'smoothed_condition_none.nii,1');
                details.smoofile{2} = fullfile(details.convroot, ...
                    'smoothed_condition_standard.nii,1');
                details.smoofile{3} = fullfile(details.convroot, ...
                    'smoothed_condition_deviant.nii,1');
            case {'phases_oddball', 'phases_roving'}
                details.convfile{1} = fullfile(details.convroot, ...
                    'condition_undefined.nii,1');
                details.convfile{2} = fullfile(details.convroot, ...
                    'condition_stabStan.nii,1');
                details.convfile{3} = fullfile(details.convroot, ...
                    'condition_stabDev.nii,1');
                details.convfile{4} = fullfile(details.convroot, ...
                    'condition_volStan.nii,1');
                details.convfile{5} = fullfile(details.convroot, ...
                    'condition_volDev.nii,1');
                
                details.smoofile{1} = fullfile(details.convroot, ...
                    'smoothed_condition_undefined.nii,1');
                details.smoofile{2} = fullfile(details.convroot, ...
                    'smoothed_condition_stabStan.nii,1');
                details.smoofile{3} = fullfile(details.convroot, ...
                    'smoothed_condition_stabDev.nii,1');
                details.smoofile{4} = fullfile(details.convroot, ...
                    'smoothed_condition_volStan.nii,1');
                details.smoofile{5} = fullfile(details.convroot, ...
                    'smoothed_condition_volDev.nii,1');                
            case 'split_phases'
                details.convfile{1} = fullfile(details.convroot, ...
                    'condition_undefined.nii,1');
                details.convfile{2} = fullfile(details.convroot, ...
                    'condition_stabStan1.nii,1');
                details.convfile{3} = fullfile(details.convroot, ...
                    'condition_stabDev1.nii,1');
                details.convfile{4} = fullfile(details.convroot, ...
                    'condition_volStan1.nii,1');
                details.convfile{5} = fullfile(details.convroot, ...
                    'condition_volDev1.nii,1');
                details.convfile{6} = fullfile(details.convroot, ...
                    'condition_stabStan2.nii,1');
                details.convfile{7} = fullfile(details.convroot, ...
                    'condition_stabDev2.nii,1');
                details.convfile{8} = fullfile(details.convroot, ...
                    'condition_volStan2.nii,1');
                details.convfile{9} = fullfile(details.convroot, ...
                    'condition_volDev2.nii,1');
                
                details.smoofile{1} = fullfile(details.convroot, ...
                    'smoothed_condition_undefined.nii,1');
                details.smoofile{2} = fullfile(details.convroot, ...
                    'smoothed_condition_stabStan1.nii,1');
                details.smoofile{3} = fullfile(details.convroot, ...
                    'smoothed_condition_stabDev1.nii,1');
                details.smoofile{4} = fullfile(details.convroot, ...
                    'smoothed_condition_volStan1.nii,1');
                details.smoofile{5} = fullfile(details.convroot, ...
                    'smoothed_condition_volDev1.nii,1');
                details.smoofile{6} = fullfile(details.convroot, ...
                    'smoothed_condition_stabStan2.nii,1');
                details.smoofile{7} = fullfile(details.convroot, ...
                    'smoothed_condition_stabDev2.nii,1');
                details.smoofile{8} = fullfile(details.convroot, ...
                    'smoothed_condition_volStan2.nii,1');
                details.smoofile{9} = fullfile(details.convroot, ...
                    'smoothed_condition_volDev2.nii,1');
        end
end

% figures
details.eyeblinkfig    = fullfile(details.preproot, ...
                            [details.subproname ...
                            '_eyeblinkDetection.fig']);
details.overlapfig      = fullfile(details.preproot, [details.subproname ...
                            '_blinktrial_overlap.fig']);    
details.eyeblinkfig1    = fullfile(details.preproot, ...
                            [details.subproname ...
                            '_eyeblinkDetection.fig']);
details.eyeblinkfig2    = fullfile(details.preproot, ...
                            [details.subproname ...
                            '_eyeblinkConfounds.fig']);
                        
details.elecfile        = fullfile(details.subproroot, 'digit', ...
                            [details.subproname '_digit.elc']);
details.correlec        = fullfile(details.subproroot, 'digit', ...
                            [details.subproname '_digit.sfp']);
details.subjectDesign   = fullfile(details.subproroot, 'design', ...
                            ['design_' options.stats.design '_' ...
                            options.stats.priors '.mat']);      
                        
                        
  
%%
%{
paths.confroot      = fullfile(options.workdir, 'conf');
paths.erproot       = fullfile(options.workdir, 'data', 'pro', 'erpanalysis');
paths.erpfold       = fullfile(paths.erproot, options.erp.type);
paths.erpspmfile    = fullfile(paths.erpfold, options.condition, ...
                    options.erp.contrastName, 'SPM.mat');
paths.erpgafile     = fullfile(paths.erpfold, options.condition, ...
                    'GA', ['GA_' options.condition '_' options.erp.type ...
                    '_' options.erp.electrode '.mat']);         
paths.spmganame     = ['spm_GA_' options.condition '_' options.erp.type ...
                    '.mat'];                
paths.spmgafile     = fullfile(paths.erpfold, options.condition, ...
                    'GA', paths.spmganame);
paths.diffgafile    = fullfile(paths.erpfold, 'drugdiff', ...
                    ['GA_diffwaves_' options.erp.type '.mat']);                
paths.statroot      = fullfile(options.workdir, 'data', 'pro', ...
                    'modelbased', options.stats.design);   
paths.diffroot      = fullfile(paths.statroot, 'drugdiff');                   

% config files
paths.paradigm      = fullfile(paths.confroot, 'mnket_paradigm.mat');
paths.channeldef    = fullfile(paths.confroot, 'mnket_chandef.mat');
paths.montage       = fullfile(paths.confroot, 'mnket_avref_eog.mat');
paths.elec          = fullfile(paths.confroot, 'mnket_sensors.sfp');
paths.trialdef      = fullfile(paths.confroot, ...
                    ['mnket_trialdef_' options.preproc.trialdef '.mat']);

% logging 2nd level analyses
paths.logfile       = fullfile(options.workdir, 'data', 'pro', ...
                    'secondlevel.log');
%}                
%%

%-- general paths and files ----------------------------------------------%
paths.scndlvlfolder   = fullfile(options.workdir, options.part, ...
                            'stats', options.stats.mode, ...
                            options.conversion.space, options.conversion.convPrefix);                
%%                

% config files
paths.montage         = fullfile(options.workdir, 'config', ...
                            [options.preproc.rereferencing '_montage.mat']);
paths.channeldef      = fullfile(options.workdir, 'config', ...
                            'dprst_channeldef.mat');
paths.trialdef        = fullfile(options.workdir, 'config', ...
                            ['dprst_trialdef_' options.preproc.trialdef '.mat']);                        

                        
paths.tnufile         = fullfile(options.workdir, 'config', ...
                            'tnu64ch.txt');
paths.paradigm        = fullfile(options.workdir, 'design', ...
                            ['paradigm_' options.stats.priors '.mat']);
paths.designFile      = fullfile(options.workdir, 'design', ...
                            ['design_' options.stats.design '_' ...
                            options.stats.priors '.mat']);     

% currently, these are the standard SPM fiducial positions
paths.spmfid.labels      = {'NAS'; 'LPA'; 'RPA'};
paths.spmfid.data        = [  1,    85,    -41; ...
                           -83,   -20,    -65; ...
                            83,   -20,    -65];


end
